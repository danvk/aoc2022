#ip 1

     0	seti 123 0 4  # E=123
     1	bani 4 456 4  # E=E&456
     2	eqri 4 72 4   # E==72 ? E=1 : E=0 (E=1)
     3	addr 4 1 1    # B+=E (B++)
     4	seti 0 0 1    # B=0
     5	seti 0 1 4    # E=0

    # Should always be this:
    # [ A, 6, 0, 0, 0, 0 ]

     6	bori 4 65536 3     # D = E | 65536
     7	seti 3730679 4 4   # E = 3730679 (0b1110001110110011110111)

     8	bani 3 255 5       # F = D & 255 (2^8-1)
     9	addr 4 5 4         # E += F
    10	bani 4 16777215 4  # E = E & 16777215 (0b111111111111111111111111 2^24-1)
    11	muli 4 65899 4     # E = E * 65899    (0b10000000101101011)
    12	bani 4 16777215 4  # E = E & 16777215 (0b111111111111111111111111 2^24-1)
    13	gtir 256 3 5       # 256 > D ? F=1 : F=0
    14	addr 5 1 1         # skip next line if F=1
    15	addi 1 1 1         # skip next line
    16	seti 27 1 1        # goto 28
    17	seti 0 0 5         # F=0, goto 18

while (true) {
  # Lines 6-7
  D = E | 65536
  E = 3730679

  # Lines 8-27
  while (true) {
    F = D & 255
    E += F
    E = E & 16777215
    E = E * 65899
    E = E & 16777215
    if (D < 256) {
      break
    }
    # F = 0
    # C = 1
    # F = floor(D / 256)
    # D = F
    # D = floor(D / 256)
    D = D >> 8
  }
  console.log(E)
  if E==A {
    exit
  }
}

1815 08 [ "bani", 3, 255, 5 ]      [ 0,  8, 1, 256,     11469373, 256 ] -> [ 0,  8, 1, 256,     11469373, 0 ]
1816 09 [ "addr", 4, 5, 4 ]        [ 0,  9, 1, 256,     11469373,   0 ] -> [ 0,  9, 1, 256,     11469373, 0 ]
1817 10 [ "bani", 4, 16777215, 4 ] [ 0, 10, 1, 256,     11469373,   0 ] -> [ 0, 10, 1, 256,     11469373, 0 ]
1818 11 [ "muli", 4, 65899, 4 ]    [ 0, 11, 1, 256,     11469373,   0 ] -> [ 0, 11, 1, 256, 755820211327, 0 ]
1819 12 [ "bani", 4, 16777215, 4 ] [ 0, 12, 1, 256, 755820211327,   0 ] -> [ 0, 12, 1, 256,      6630527, 0 ]
1820 13 [ "gtir", 256, 3, 5 ]      [ 0, 13, 1, 256,      6630527,   0 ] -> [ 0, 13, 1, 256,      6630527, 0 ]
1821 14 [ "addr", 5, 1, 1 ]        [ 0, 14, 1, 256,      6630527,   0 ] -> [ 0, 14, 1, 256,      6630527, 0 ]
1822 15 [ "addi", 1, 1, 1 ]        [ 0, 15, 1, 256,      6630527,   0 ] -> [ 0, 16, 1, 256,      6630527, 0 ]
1823 17 [ "seti", 0, 0, 5 ]        [ 0, 17, 1, 256,      6630527,   0 ] -> [ 0, 17, 1, 256,      6630527, 0 ]

#   A   B  C      D         E  F
# [ 0, 18, 0, 65536, 11469373, 0 ]
# This is the infinite loop
    18	addi 5 1 2   # C=F+1
    19	muli 2 256 2 # C*=256
    20	gtrr 2 3 2   # C>D ? C=1 : C=0
    21	addr 2 1 1   # skip next if C=1
    22	addi 1 1 1   # skip next
    23	seti 25 1 1  # goto 26
    24	addi 5 1 5   # F++
    25	seti 17 1 1  # goto 18

# Lines 18-25
# Net effect: C = 1; F=floor(D / 256)
while (true) {
     C = 256 * (F + 1)
     if C > D {
          C = 1
          goto 26
     }
     F++
}

16 18 [ "addi", 5, 1, 2 ]   [ 0, 18,   0, 65536, 11469373, 0 ] -> [ 0, 18,   1, 65536, 11469373, 0 ]
17 19 [ "muli", 2, 256, 2 ] [ 0, 19,   1, 65536, 11469373, 0 ] -> [ 0, 19, 256, 65536, 11469373, 0 ]
18 20 [ "gtrr", 2, 3, 2 ]   [ 0, 20, 256, 65536, 11469373, 0 ] -> [ 0, 20,   0, 65536, 11469373, 0 ]
19 21 [ "addr", 2, 1, 1 ]   [ 0, 21,   0, 65536, 11469373, 0 ] -> [ 0, 21,   0, 65536, 11469373, 0 ]
20 22 [ "addi", 1, 1, 1 ]   [ 0, 22,   0, 65536, 11469373, 0 ] -> [ 0, 23,   0, 65536, 11469373, 0 ]
21 24 [ "addi", 5, 1, 5 ]   [ 0, 24,   0, 65536, 11469373, 0 ] -> [ 0, 24,   0, 65536, 11469373, 1 ]
22 25 [ "seti", 17, 1, 1 ]  [ 0, 25,   0, 65536, 11469373, 1 ] -> [ 0, 17,   0, 65536, 11469373, 1 ]
...
                              A   B  C      D         E    F
1813 26 [ "setr", 5, 2, 3 ] [ 0, 26, 1, 65536, 11469373, 256 ] -> [ 0, 26, 1, 256, 11469373, 256 ]
1836 26 [ "setr", 5, 2, 3 ] [ 0, 26, 1,   256,  6630527,   1 ] -> [ 0, 26, 1,   1,  6630527,   1 ]

    26	setr 5 2 3  # D = F
    27	seti 7 6 1  # goto 8

# Nothing ever writes to register 0 (A) so this is where we have control.

    28	eqrr 4 0 5   # exit if E==A
    29	addr 5 1 1
    30	seti 5 1 1   # goto 6

                              A   B  C  D         E  F
  1846 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 1, 16128384, 1 ] -> [ 0, 28, 1, 1, 16128384, 0 ]

 446419 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 247, 7594979, 1 ] -> [ 0, 28, 1, 247, 7594979, 0 ]
 654938 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 115, 4358858, 1 ] -> [ 0, 28, 1, 115, 4358858, 0 ]
 776426 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 67, 12563078, 1 ] -> [ 0, 28, 1, 67, 12563078, 0 ]
1121326 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 191, 7495422, 1 ] -> [ 0, 28, 1, 191, 7495422, 0 ]
1328914 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 115, 9196910, 1 ] -> [ 0, 28, 1, 115, 9196910, 0 ]
1583213 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 141, 5403419, 1 ] -> [ 0, 28, 1, 141, 5403419, 0 ]
1733380 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 83, 13960098, 1 ] -> [ 0, 28, 1, 83, 13960098, 0 ]

1846 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 1, 16128384, 1 ]
446419 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 247, 7594979, 1 ]
654938 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 115, 4358858, 1 ]
776426 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 67, 12563078, 1 ]
1121326 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 191, 7495422, 1 ]
1328914 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 115, 9196910, 1 ]
1583213 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 141, 5403419, 1 ]
1733380 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 83, 13960098, 1 ]
2116633 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 213, 6732493, 1 ]
2303277 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 103, 3347203, 1 ]
2395204 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 51, 4139290, 1 ]
2508873 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 63, 4931961, 1 ]
2644298 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 75, 6641314, 1 ]
2826644 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 101, 16711160, 1 ]
3287205 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 255, 2466535, 1 ]
3354947 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 37, 3069059, 1 ]
3441029 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 47, 8608359, 1 ]
3677373 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 131, 6188101, 1 ]
3849079 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 95, 12920629, 1 ]
4203800 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 197, 10827466, 1 ]
4501058 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 165, 93840, 1 ]
4503672 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 1, 8598446, 1 ]
4739743 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 131, 13573403, 1 ]
5112384 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 207, 12634448, 1 ]
5461043 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 193, 14034673, 1 ]
5848139 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 215, 7412363, 1 ]
6051653 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 113, 16425003, 1 ]
6504367 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 251, 12857743, 1 ]
6859158 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 197, 13289266, 1 ]
7225793 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 203, 10378739, 1 ]
7512530 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 159, 11213192, 1 ]
7820379 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 171, 5135031, 1 ]
7963175 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 79, 11467897, 1 ]
8279809 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 175, 9691537, 1 ]
8545882 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 147, 2365474, 1 ]
8612658 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 37, 16765162, 1 ]
9072904 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 255, 15277016, 1 ]
9492305 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 233, 12685827, 1 ]
9840579 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 193, 16206907, 1 ]
10285509 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 247, 2952287, 1 ]
10366593 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 45, 1063773, 1 ]
10397634 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 17, 9624314, 1 ]
10663658 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 147, 3826462, 1 ]
10770537 28 [ "eqrr", 4, 0, 5 ] [ 0, 28, 1, 59, 4934403, 1 ]